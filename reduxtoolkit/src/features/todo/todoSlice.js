import { createSlice, nanoid } from "@reduxjs/toolkit";

const initialState = {
    todos: [{ id: 1, text: "Hi I'm Redux ToolKit" }],
};


export const todoSlice = createSlice({
    name: "todo",
    initialState,
    /*
      The addTodo reducer function takes the current state and an action as arguments.
      When called, it creates a new todo object with a unique id generated by
      nanoid() and a text property set to the payload of the action.
      It then adds this new todo object to the end of the todos array in the state.
      This slice can be used in a Redux store to manage a list of todo items.
      */
    reducers:
    {
        addTodo: (state, action) => {
            // Here the new todo object is being created to be pushed inside the todos array
            const todo = {
                id: nanoid(),
                text: action.payload,
            };
            state.todos.push(todo);
        },

        removeTodo: (state, action) => {
          state.todos = state.todos.filter((todo) => todo.id !== action.payload);},

        // removeTodo: (state, action) => {
        //     const index = state.todos.findIndex((todo) => todo.id === action.payload);
        //     if (index !== -1) {
        //         state.todos.splice(index, 1);
        //     }
        // },

        updateTodo: (state, action) => {
            state.todos = state.todos.map((todo) => {
                if (todo.id === action.payload.id) {
                    // this line returns a new object that is a copy of the original todo item,
                    // but with its text property updated to the value of action.payload.text.
                    return { ...todo, text: action.payload.text };
                }
                //  If the todo item doesn't match, this line simply returns the original todo item unchanged.
                return todo;
            });
        },

        // updateTodo: (state, action) => {
        //     const todoIndex = state.todos.findIndex((todo) => todo.id === action.payload.id);
        //     if (todoIndex !== -1) {
        //         state.todos[todoIndex] = Object.assign({}, state.todos[todoIndex], { text: action.payload.text });
        //     }
        //     return state.todos;
        // }
    },

});

// This line is used so that we can use the functionalities of reducer slice in various places
export const { addTodo, removeTodo, updateTodo } = todoSlice.actions

// This line is used to be wired up with the store
const todoReducer = todoSlice.reducer;
export default todoReducer